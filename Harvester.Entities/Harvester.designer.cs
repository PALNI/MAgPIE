#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZondervanLibrary.Harvester.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Harvester")]
	public partial class HarvesterDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRepository(Repository instance);
    partial void UpdateRepository(Repository instance);
    partial void DeleteRepository(Repository instance);
    partial void InsertDirectoryRecord(DirectoryRecord instance);
    partial void UpdateDirectoryRecord(DirectoryRecord instance);
    partial void DeleteDirectoryRecord(DirectoryRecord instance);
    partial void InsertOperationRecord(OperationRecord instance);
    partial void UpdateOperationRecord(OperationRecord instance);
    partial void DeleteOperationRecord(OperationRecord instance);
    partial void InsertOperation(Operation instance);
    partial void UpdateOperation(Operation instance);
    partial void DeleteOperation(Operation instance);
    partial void InsertCounterOperationRecord(CounterOperationRecord instance);
    partial void UpdateCounterOperationRecord(CounterOperationRecord instance);
    partial void DeleteCounterOperationRecord(CounterOperationRecord instance);
    #endregion
		
		public HarvesterDataContext() : 
				base(global::ZondervanLibrary.Harvester.Entities.Properties.Settings.Default.HarvesterConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public HarvesterDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HarvesterDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HarvesterDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HarvesterDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Repository> Repositories
		{
			get
			{
				return this.GetTable<Repository>();
			}
		}
		
		public System.Data.Linq.Table<DirectoryRecord> DirectoryRecords
		{
			get
			{
				return this.GetTable<DirectoryRecord>();
			}
		}
		
		public System.Data.Linq.Table<OperationRecord> OperationRecords
		{
			get
			{
				return this.GetTable<OperationRecord>();
			}
		}
		
		public System.Data.Linq.Table<Operation> Operations
		{
			get
			{
				return this.GetTable<Operation>();
			}
		}
		
		public System.Data.Linq.Table<CounterOperationRecord> CounterOperationRecords
		{
			get
			{
				return this.GetTable<CounterOperationRecord>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Persistance.Repositories")]
	public partial class Repository : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DirectoryRecord> _DirectoryRecords;
		
		private EntitySet<CounterOperationRecord> _CounterOperationRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Repository()
		{
			this._DirectoryRecords = new EntitySet<DirectoryRecord>(new Action<DirectoryRecord>(this.attach_DirectoryRecords), new Action<DirectoryRecord>(this.detach_DirectoryRecords));
			this._CounterOperationRecords = new EntitySet<CounterOperationRecord>(new Action<CounterOperationRecord>(this.attach_CounterOperationRecords), new Action<CounterOperationRecord>(this.detach_CounterOperationRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repository_DirectoryRecord", Storage="_DirectoryRecords", ThisKey="ID", OtherKey="RepositoryID")]
		public EntitySet<DirectoryRecord> DirectoryRecords
		{
			get
			{
				return this._DirectoryRecords;
			}
			set
			{
				this._DirectoryRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repository_CounterOperationRecord", Storage="_CounterOperationRecords", ThisKey="ID", OtherKey="RepositoryID")]
		public EntitySet<CounterOperationRecord> CounterOperationRecords
		{
			get
			{
				return this._CounterOperationRecords;
			}
			set
			{
				this._CounterOperationRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DirectoryRecords(DirectoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Repository = this;
		}
		
		private void detach_DirectoryRecords(DirectoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Repository = null;
		}
		
		private void attach_CounterOperationRecords(CounterOperationRecord entity)
		{
			this.SendPropertyChanging();
			entity.Repository = this;
		}
		
		private void detach_CounterOperationRecords(CounterOperationRecord entity)
		{
			this.SendPropertyChanging();
			entity.Repository = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Persistance.DirectoryRecords")]
	public partial class DirectoryRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperationID;
		
		private int _RepositoryID;
		
		private string _FilePath;
		
		private System.DateTime _FileModifiedDate;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Repository> _Repository;
		
		private EntityRef<Operation> _Operation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperationIDChanging(int value);
    partial void OnOperationIDChanged();
    partial void OnRepositoryIDChanging(int value);
    partial void OnRepositoryIDChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileModifiedDateChanging(System.DateTime value);
    partial void OnFileModifiedDateChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public DirectoryRecord()
		{
			this._Repository = default(EntityRef<Repository>);
			this._Operation = default(EntityRef<Operation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OperationID
		{
			get
			{
				return this._OperationID;
			}
			set
			{
				if ((this._OperationID != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationIDChanging(value);
					this.SendPropertyChanging();
					this._OperationID = value;
					this.SendPropertyChanged("OperationID");
					this.OnOperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepositoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RepositoryID
		{
			get
			{
				return this._RepositoryID;
			}
			set
			{
				if ((this._RepositoryID != value))
				{
					if (this._Repository.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepositoryIDChanging(value);
					this.SendPropertyChanging();
					this._RepositoryID = value;
					this.SendPropertyChanged("RepositoryID");
					this.OnRepositoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(1024) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime FileModifiedDate
		{
			get
			{
				return this._FileModifiedDate;
			}
			set
			{
				if ((this._FileModifiedDate != value))
				{
					this.OnFileModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._FileModifiedDate = value;
					this.SendPropertyChanged("FileModifiedDate");
					this.OnFileModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repository_DirectoryRecord", Storage="_Repository", ThisKey="RepositoryID", OtherKey="ID", IsForeignKey=true)]
		public Repository Repository
		{
			get
			{
				return this._Repository.Entity;
			}
			set
			{
				Repository previousValue = this._Repository.Entity;
				if (((previousValue != value) 
							|| (this._Repository.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Repository.Entity = null;
						previousValue.DirectoryRecords.Remove(this);
					}
					this._Repository.Entity = value;
					if ((value != null))
					{
						value.DirectoryRecords.Add(this);
						this._RepositoryID = value.ID;
					}
					else
					{
						this._RepositoryID = default(int);
					}
					this.SendPropertyChanged("Repository");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_DirectoryRecord", Storage="_Operation", ThisKey="OperationID", OtherKey="ID", IsForeignKey=true)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.DirectoryRecords.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.DirectoryRecords.Add(this);
						this._OperationID = value.ID;
					}
					else
					{
						this._OperationID = default(int);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Persistance.OperationRecords")]
	public partial class OperationRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperationID;
		
		private System.DateTime _RunDate;
		
		private System.DateTime _ExecutedDate;
		
		private EntityRef<Operation> _Operation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperationIDChanging(int value);
    partial void OnOperationIDChanged();
    partial void OnRunDateChanging(System.DateTime value);
    partial void OnRunDateChanged();
    partial void OnExecutedDateChanging(System.DateTime value);
    partial void OnExecutedDateChanged();
    #endregion
		
		public OperationRecord()
		{
			this._Operation = default(EntityRef<Operation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OperationID
		{
			get
			{
				return this._OperationID;
			}
			set
			{
				if ((this._OperationID != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationIDChanging(value);
					this.SendPropertyChanging();
					this._OperationID = value;
					this.SendPropertyChanged("OperationID");
					this.OnOperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime RunDate
		{
			get
			{
				return this._RunDate;
			}
			set
			{
				if ((this._RunDate != value))
				{
					this.OnRunDateChanging(value);
					this.SendPropertyChanging();
					this._RunDate = value;
					this.SendPropertyChanged("RunDate");
					this.OnRunDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExecutedDate
		{
			get
			{
				return this._ExecutedDate;
			}
			set
			{
				if ((this._ExecutedDate != value))
				{
					this.OnExecutedDateChanging(value);
					this.SendPropertyChanging();
					this._ExecutedDate = value;
					this.SendPropertyChanged("ExecutedDate");
					this.OnExecutedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_OperationRecord", Storage="_Operation", ThisKey="OperationID", OtherKey="ID", IsForeignKey=true)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.OperationRecords.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.OperationRecords.Add(this);
						this._OperationID = value.ID;
					}
					else
					{
						this._OperationID = default(int);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Persistance.Operations")]
	public partial class Operation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DirectoryRecord> _DirectoryRecords;
		
		private EntitySet<OperationRecord> _OperationRecords;
		
		private EntitySet<CounterOperationRecord> _CounterOperationRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Operation()
		{
			this._DirectoryRecords = new EntitySet<DirectoryRecord>(new Action<DirectoryRecord>(this.attach_DirectoryRecords), new Action<DirectoryRecord>(this.detach_DirectoryRecords));
			this._OperationRecords = new EntitySet<OperationRecord>(new Action<OperationRecord>(this.attach_OperationRecords), new Action<OperationRecord>(this.detach_OperationRecords));
			this._CounterOperationRecords = new EntitySet<CounterOperationRecord>(new Action<CounterOperationRecord>(this.attach_CounterOperationRecords), new Action<CounterOperationRecord>(this.detach_CounterOperationRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_DirectoryRecord", Storage="_DirectoryRecords", ThisKey="ID", OtherKey="OperationID")]
		public EntitySet<DirectoryRecord> DirectoryRecords
		{
			get
			{
				return this._DirectoryRecords;
			}
			set
			{
				this._DirectoryRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_OperationRecord", Storage="_OperationRecords", ThisKey="ID", OtherKey="OperationID")]
		public EntitySet<OperationRecord> OperationRecords
		{
			get
			{
				return this._OperationRecords;
			}
			set
			{
				this._OperationRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_CounterOperationRecord", Storage="_CounterOperationRecords", ThisKey="ID", OtherKey="OperationID")]
		public EntitySet<CounterOperationRecord> CounterOperationRecords
		{
			get
			{
				return this._CounterOperationRecords;
			}
			set
			{
				this._CounterOperationRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DirectoryRecords(DirectoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_DirectoryRecords(DirectoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
		
		private void attach_OperationRecords(OperationRecord entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_OperationRecords(OperationRecord entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
		
		private void attach_CounterOperationRecords(CounterOperationRecord entity)
		{
			this.SendPropertyChanging();
			entity.Operation = this;
		}
		
		private void detach_CounterOperationRecords(CounterOperationRecord entity)
		{
			this.SendPropertyChanging();
			entity.Operation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Persistance.CounterOperationRecords")]
	public partial class CounterOperationRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperationID;
		
		private int _RepositoryID;
		
		private System.DateTime _RunDate;
		
		private string _Report;
		
		private System.DateTime _ExecutedDate;
		
		private EntityRef<Operation> _Operation;
		
		private EntityRef<Repository> _Repository;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperationIDChanging(int value);
    partial void OnOperationIDChanged();
    partial void OnRepositoryIDChanging(int value);
    partial void OnRepositoryIDChanged();
    partial void OnRunDateChanging(System.DateTime value);
    partial void OnRunDateChanged();
    partial void OnReportChanging(string value);
    partial void OnReportChanged();
    partial void OnExecutedDateChanging(System.DateTime value);
    partial void OnExecutedDateChanged();
    #endregion
		
		public CounterOperationRecord()
		{
			this._Operation = default(EntityRef<Operation>);
			this._Repository = default(EntityRef<Repository>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OperationID
		{
			get
			{
				return this._OperationID;
			}
			set
			{
				if ((this._OperationID != value))
				{
					if (this._Operation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationIDChanging(value);
					this.SendPropertyChanging();
					this._OperationID = value;
					this.SendPropertyChanged("OperationID");
					this.OnOperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepositoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RepositoryID
		{
			get
			{
				return this._RepositoryID;
			}
			set
			{
				if ((this._RepositoryID != value))
				{
					if (this._Repository.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepositoryIDChanging(value);
					this.SendPropertyChanging();
					this._RepositoryID = value;
					this.SendPropertyChanged("RepositoryID");
					this.OnRepositoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime RunDate
		{
			get
			{
				return this._RunDate;
			}
			set
			{
				if ((this._RunDate != value))
				{
					this.OnRunDateChanging(value);
					this.SendPropertyChanging();
					this._RunDate = value;
					this.SendPropertyChanged("RunDate");
					this.OnRunDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Report
		{
			get
			{
				return this._Report;
			}
			set
			{
				if ((this._Report != value))
				{
					this.OnReportChanging(value);
					this.SendPropertyChanging();
					this._Report = value;
					this.SendPropertyChanged("Report");
					this.OnReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExecutedDate
		{
			get
			{
				return this._ExecutedDate;
			}
			set
			{
				if ((this._ExecutedDate != value))
				{
					this.OnExecutedDateChanging(value);
					this.SendPropertyChanging();
					this._ExecutedDate = value;
					this.SendPropertyChanged("ExecutedDate");
					this.OnExecutedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operation_CounterOperationRecord", Storage="_Operation", ThisKey="OperationID", OtherKey="ID", IsForeignKey=true)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.CounterOperationRecords.Remove(this);
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.CounterOperationRecords.Add(this);
						this._OperationID = value.ID;
					}
					else
					{
						this._OperationID = default(int);
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repository_CounterOperationRecord", Storage="_Repository", ThisKey="RepositoryID", OtherKey="ID", IsForeignKey=true)]
		public Repository Repository
		{
			get
			{
				return this._Repository.Entity;
			}
			set
			{
				Repository previousValue = this._Repository.Entity;
				if (((previousValue != value) 
							|| (this._Repository.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Repository.Entity = null;
						previousValue.CounterOperationRecords.Remove(this);
					}
					this._Repository.Entity = value;
					if ((value != null))
					{
						value.CounterOperationRecords.Add(this);
						this._RepositoryID = value.ID;
					}
					else
					{
						this._RepositoryID = default(int);
					}
					this.SendPropertyChanged("Repository");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
