<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
// <copyright file="EmitFactoryGenerator.tt" company="">
//  Copyright Â© . All Rights Reserved.
// </copyright>

	Int32 methodArgumentMax = 4;
	
	String instanceType = "TInstance";
	String methodArgumentTypeFormat = "TMethodArg{0}";
	String methodArgumentNameFormat = "methodArg{0}";

	String[] numbers = new String[] { "no", "one", "two", "three", "four", "five", "six", "seven", "eight" };
	String[] ordinals = new String[] { "", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth" };

#>
//----------------------------------------------------------------------------------------------------
// This code was generated by a tool (<#= DateTime.Now.ToString() #>).
//----------------------------------------------------------------------------------------------------
using System;

namespace ZondervanLibrary.SharedLibrary.Factory
{
<#
	List<String> classTypes = new List<String> { instanceType };
	List<String> methodTypes = new List<String>();
	List<String> methodDeclaration = new List<String>();

	for (int methodArguments = 0; methodArguments <= methodArgumentMax; methodArguments++)
	{
#>
	/// <summary>Provides a factory whose factory method has <#= numbers[methodArguments] #> argument<#= (methodArguments != 1) ? "s" : "" #>.</summary>
	/// <typeparam name="<#= instanceType #>">The type of the object created by this factory.</typeparam>
<#
	for (int i = 1; i <= methodArguments; i++)
	{
#>
	/// <typeparam name="<#= String.Format(methodArgumentTypeFormat, i) #>">The type of the <#= ordinals[i] #> parameter of the <see cref="IFactory{<#= String.Join(",", classTypes) #>}.CreateInstance(<#= String.Join(",", methodTypes) #>)"/> method.</typeparam>
<#
	}
#>
	/// <remarks>
	///		<para>This interface is used for an implementation of the Abstract Factory Pattern.</para>
	///     <para>For more information, see the <conceptualLink target="e75bc7a3-cbcb-4934-8c95-01bf84baccf1"/> topic.</para>
	/// </remarks>
	public interface IFactory<<#= String.Join(", ", classTypes) #>>
	{
		/// <summary> Creates a new instance of <typeparamref name="<#= instanceType #>"/>.</summary>
<#
		for (int i = 1; i <= methodArguments; i++)
		{
#>
		/// <param name="<#= String.Format(methodArgumentNameFormat, i) #>">The <#= ordinals[i] #> parameter.</param>
<#
		}
#>
		/// <returns>An object of type <typeparamref name="<#= instanceType #>"/></returns>
		/// <remarks>
        ///     <para>For more information, see the <conceptualLink target="e75bc7a3-cbcb-4934-8c95-01bf84baccf1"/> topic.</para>
        /// </remarks>
		<#= instanceType #> CreateInstance(<#= String.Join(", ", methodDeclaration) #>);
	}

<#
	String methodType = String.Format(methodArgumentTypeFormat, methodArguments + 1);
	String methodName = String.Format(methodArgumentNameFormat, methodArguments + 1);

	classTypes.Add(methodType);
	methodTypes.Add(methodType);
	methodDeclaration.Add(String.Format("{0} {1}", methodType, methodName));
	}
#>
}