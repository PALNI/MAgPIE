#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZondervanLibrary.SharedLibrary.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Statistics")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertJournal(Journal instance);
    partial void UpdateJournal(Journal instance);
    partial void DeleteJournal(Journal instance);
    partial void InsertJournalRecord(JournalRecord instance);
    partial void UpdateJournalRecord(JournalRecord instance);
    partial void DeleteJournalRecord(JournalRecord instance);
    partial void InsertDatabase(Database instance);
    partial void UpdateDatabase(Database instance);
    partial void DeleteDatabase(Database instance);
    partial void InsertDatabaseRecord(DatabaseRecord instance);
    partial void UpdateDatabaseRecord(DatabaseRecord instance);
    partial void DeleteDatabaseRecord(DatabaseRecord instance);
    partial void InsertVendorRecord(VendorRecord instance);
    partial void UpdateVendorRecord(VendorRecord instance);
    partial void DeleteVendorRecord(VendorRecord instance);
    partial void InsertVendor(Vendor instance);
    partial void UpdateVendor(Vendor instance);
    partial void DeleteVendor(Vendor instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ZondervanLibrary.SharedLibrary.Properties.Settings.Default.StatisticsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Journal> Journals
		{
			get
			{
				return this.GetTable<Journal>();
			}
		}
		
		public System.Data.Linq.Table<JournalRecord> JournalRecords
		{
			get
			{
				return this.GetTable<JournalRecord>();
			}
		}
		
		public System.Data.Linq.Table<Database> Databases
		{
			get
			{
				return this.GetTable<Database>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseRecord> DatabaseRecords
		{
			get
			{
				return this.GetTable<DatabaseRecord>();
			}
		}
		
		public System.Data.Linq.Table<VendorRecord> VendorRecords
		{
			get
			{
				return this.GetTable<VendorRecord>();
			}
		}
		
		public System.Data.Linq.Table<Vendor> Vendors
		{
			get
			{
				return this.GetTable<Vendor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Journals.Journals")]
	public partial class Journal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JournalID;
		
		private string _JournalName;
		
		private string _PrintISSN;
		
		private string _OnlineISSN;
		
		private EntitySet<JournalRecord> _JournalRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJournalIDChanging(int value);
    partial void OnJournalIDChanged();
    partial void OnJournalNameChanging(string value);
    partial void OnJournalNameChanged();
    partial void OnPrintISSNChanging(string value);
    partial void OnPrintISSNChanged();
    partial void OnOnlineISSNChanging(string value);
    partial void OnOnlineISSNChanged();
    #endregion
		
		public Journal()
		{
			this._JournalRecords = new EntitySet<JournalRecord>(new Action<JournalRecord>(this.attach_JournalRecords), new Action<JournalRecord>(this.detach_JournalRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JournalID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JournalID
		{
			get
			{
				return this._JournalID;
			}
			set
			{
				if ((this._JournalID != value))
				{
					this.OnJournalIDChanging(value);
					this.SendPropertyChanging();
					this._JournalID = value;
					this.SendPropertyChanged("JournalID");
					this.OnJournalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JournalName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string JournalName
		{
			get
			{
				return this._JournalName;
			}
			set
			{
				if ((this._JournalName != value))
				{
					this.OnJournalNameChanging(value);
					this.SendPropertyChanging();
					this._JournalName = value;
					this.SendPropertyChanged("JournalName");
					this.OnJournalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrintISSN", DbType="NChar(15)")]
		public string PrintISSN
		{
			get
			{
				return this._PrintISSN;
			}
			set
			{
				if ((this._PrintISSN != value))
				{
					this.OnPrintISSNChanging(value);
					this.SendPropertyChanging();
					this._PrintISSN = value;
					this.SendPropertyChanged("PrintISSN");
					this.OnPrintISSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnlineISSN", DbType="NChar(15)")]
		public string OnlineISSN
		{
			get
			{
				return this._OnlineISSN;
			}
			set
			{
				if ((this._OnlineISSN != value))
				{
					this.OnOnlineISSNChanging(value);
					this.SendPropertyChanging();
					this._OnlineISSN = value;
					this.SendPropertyChanged("OnlineISSN");
					this.OnOnlineISSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Journal_JournalRecord", Storage="_JournalRecords", ThisKey="JournalID", OtherKey="JournalID")]
		public EntitySet<JournalRecord> JournalRecords
		{
			get
			{
				return this._JournalRecords;
			}
			set
			{
				this._JournalRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JournalRecords(JournalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Journal = this;
		}
		
		private void detach_JournalRecords(JournalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Journal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Journals.JournalRecords")]
	public partial class JournalRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VendorID;
		
		private int _DatabaseID;
		
		private int _JournalID;
		
		private System.DateTime _RunDate;
		
		private System.Nullable<int> _FullText;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Journal> _Journal;
		
		private EntityRef<Database> _Database;
		
		private EntityRef<Vendor> _Vendor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVendorIDChanging(int value);
    partial void OnVendorIDChanged();
    partial void OnDatabaseIDChanging(int value);
    partial void OnDatabaseIDChanged();
    partial void OnJournalIDChanging(int value);
    partial void OnJournalIDChanged();
    partial void OnRunDateChanging(System.DateTime value);
    partial void OnRunDateChanged();
    partial void OnFullTextChanging(System.Nullable<int> value);
    partial void OnFullTextChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public JournalRecord()
		{
			this._Journal = default(EntityRef<Journal>);
			this._Database = default(EntityRef<Database>);
			this._Vendor = default(EntityRef<Vendor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					if (this._Vendor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DatabaseID
		{
			get
			{
				return this._DatabaseID;
			}
			set
			{
				if ((this._DatabaseID != value))
				{
					if (this._Database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatabaseIDChanging(value);
					this.SendPropertyChanging();
					this._DatabaseID = value;
					this.SendPropertyChanged("DatabaseID");
					this.OnDatabaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JournalID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JournalID
		{
			get
			{
				return this._JournalID;
			}
			set
			{
				if ((this._JournalID != value))
				{
					if (this._Journal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJournalIDChanging(value);
					this.SendPropertyChanging();
					this._JournalID = value;
					this.SendPropertyChanged("JournalID");
					this.OnJournalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime RunDate
		{
			get
			{
				return this._RunDate;
			}
			set
			{
				if ((this._RunDate != value))
				{
					this.OnRunDateChanging(value);
					this.SendPropertyChanging();
					this._RunDate = value;
					this.SendPropertyChanged("RunDate");
					this.OnRunDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullText", DbType="Int")]
		public System.Nullable<int> FullText
		{
			get
			{
				return this._FullText;
			}
			set
			{
				if ((this._FullText != value))
				{
					this.OnFullTextChanging(value);
					this.SendPropertyChanging();
					this._FullText = value;
					this.SendPropertyChanged("FullText");
					this.OnFullTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Journal_JournalRecord", Storage="_Journal", ThisKey="JournalID", OtherKey="JournalID", IsForeignKey=true)]
		public Journal Journal
		{
			get
			{
				return this._Journal.Entity;
			}
			set
			{
				Journal previousValue = this._Journal.Entity;
				if (((previousValue != value) 
							|| (this._Journal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Journal.Entity = null;
						previousValue.JournalRecords.Remove(this);
					}
					this._Journal.Entity = value;
					if ((value != null))
					{
						value.JournalRecords.Add(this);
						this._JournalID = value.JournalID;
					}
					else
					{
						this._JournalID = default(int);
					}
					this.SendPropertyChanged("Journal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_JournalRecord", Storage="_Database", ThisKey="DatabaseID", OtherKey="DatabaseID", IsForeignKey=true)]
		public Database Database
		{
			get
			{
				return this._Database.Entity;
			}
			set
			{
				Database previousValue = this._Database.Entity;
				if (((previousValue != value) 
							|| (this._Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Database.Entity = null;
						previousValue.JournalRecords.Remove(this);
					}
					this._Database.Entity = value;
					if ((value != null))
					{
						value.JournalRecords.Add(this);
						this._DatabaseID = value.DatabaseID;
					}
					else
					{
						this._DatabaseID = default(int);
					}
					this.SendPropertyChanged("Database");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_JournalRecord", Storage="_Vendor", ThisKey="VendorID", OtherKey="VendorId", IsForeignKey=true)]
		public Vendor Vendor
		{
			get
			{
				return this._Vendor.Entity;
			}
			set
			{
				Vendor previousValue = this._Vendor.Entity;
				if (((previousValue != value) 
							|| (this._Vendor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vendor.Entity = null;
						previousValue.JournalRecords.Remove(this);
					}
					this._Vendor.Entity = value;
					if ((value != null))
					{
						value.JournalRecords.Add(this);
						this._VendorID = value.VendorId;
					}
					else
					{
						this._VendorID = default(int);
					}
					this.SendPropertyChanged("Vendor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Journals.Databases")]
	public partial class Database : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DatabaseID;
		
		private string _DatabaseName;
		
		private EntitySet<JournalRecord> _JournalRecords;
		
		private EntitySet<DatabaseRecord> _DatabaseRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDatabaseIDChanging(int value);
    partial void OnDatabaseIDChanged();
    partial void OnDatabaseNameChanging(string value);
    partial void OnDatabaseNameChanged();
    #endregion
		
		public Database()
		{
			this._JournalRecords = new EntitySet<JournalRecord>(new Action<JournalRecord>(this.attach_JournalRecords), new Action<JournalRecord>(this.detach_JournalRecords));
			this._DatabaseRecords = new EntitySet<DatabaseRecord>(new Action<DatabaseRecord>(this.attach_DatabaseRecords), new Action<DatabaseRecord>(this.detach_DatabaseRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DatabaseID
		{
			get
			{
				return this._DatabaseID;
			}
			set
			{
				if ((this._DatabaseID != value))
				{
					this.OnDatabaseIDChanging(value);
					this.SendPropertyChanging();
					this._DatabaseID = value;
					this.SendPropertyChanged("DatabaseID");
					this.OnDatabaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DatabaseName
		{
			get
			{
				return this._DatabaseName;
			}
			set
			{
				if ((this._DatabaseName != value))
				{
					this.OnDatabaseNameChanging(value);
					this.SendPropertyChanging();
					this._DatabaseName = value;
					this.SendPropertyChanged("DatabaseName");
					this.OnDatabaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_JournalRecord", Storage="_JournalRecords", ThisKey="DatabaseID", OtherKey="DatabaseID")]
		public EntitySet<JournalRecord> JournalRecords
		{
			get
			{
				return this._JournalRecords;
			}
			set
			{
				this._JournalRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_DatabaseRecord", Storage="_DatabaseRecords", ThisKey="DatabaseID", OtherKey="DatabaseID")]
		public EntitySet<DatabaseRecord> DatabaseRecords
		{
			get
			{
				return this._DatabaseRecords;
			}
			set
			{
				this._DatabaseRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JournalRecords(JournalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Database = this;
		}
		
		private void detach_JournalRecords(JournalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Database = null;
		}
		
		private void attach_DatabaseRecords(DatabaseRecord entity)
		{
			this.SendPropertyChanging();
			entity.Database = this;
		}
		
		private void detach_DatabaseRecords(DatabaseRecord entity)
		{
			this.SendPropertyChanging();
			entity.Database = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Journals.DatabaseRecords")]
	public partial class DatabaseRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VendorID;
		
		private int _DatabaseID;
		
		private System.DateTime _RunDate;
		
		private System.Nullable<int> _Searches;
		
		private System.Nullable<int> _ResultClicks;
		
		private System.Nullable<int> _RecordViews;
		
		private System.Nullable<int> _FullText;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Database> _Database;
		
		private EntityRef<Vendor> _Vendor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVendorIDChanging(int value);
    partial void OnVendorIDChanged();
    partial void OnDatabaseIDChanging(int value);
    partial void OnDatabaseIDChanged();
    partial void OnRunDateChanging(System.DateTime value);
    partial void OnRunDateChanged();
    partial void OnSearchesChanging(System.Nullable<int> value);
    partial void OnSearchesChanged();
    partial void OnResultClicksChanging(System.Nullable<int> value);
    partial void OnResultClicksChanged();
    partial void OnRecordViewsChanging(System.Nullable<int> value);
    partial void OnRecordViewsChanged();
    partial void OnFullTextChanging(System.Nullable<int> value);
    partial void OnFullTextChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public DatabaseRecord()
		{
			this._Database = default(EntityRef<Database>);
			this._Vendor = default(EntityRef<Vendor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					if (this._Vendor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DatabaseID
		{
			get
			{
				return this._DatabaseID;
			}
			set
			{
				if ((this._DatabaseID != value))
				{
					if (this._Database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatabaseIDChanging(value);
					this.SendPropertyChanging();
					this._DatabaseID = value;
					this.SendPropertyChanged("DatabaseID");
					this.OnDatabaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime RunDate
		{
			get
			{
				return this._RunDate;
			}
			set
			{
				if ((this._RunDate != value))
				{
					this.OnRunDateChanging(value);
					this.SendPropertyChanging();
					this._RunDate = value;
					this.SendPropertyChanged("RunDate");
					this.OnRunDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Searches", DbType="Int")]
		public System.Nullable<int> Searches
		{
			get
			{
				return this._Searches;
			}
			set
			{
				if ((this._Searches != value))
				{
					this.OnSearchesChanging(value);
					this.SendPropertyChanging();
					this._Searches = value;
					this.SendPropertyChanged("Searches");
					this.OnSearchesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultClicks", DbType="Int")]
		public System.Nullable<int> ResultClicks
		{
			get
			{
				return this._ResultClicks;
			}
			set
			{
				if ((this._ResultClicks != value))
				{
					this.OnResultClicksChanging(value);
					this.SendPropertyChanging();
					this._ResultClicks = value;
					this.SendPropertyChanged("ResultClicks");
					this.OnResultClicksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordViews", DbType="Int")]
		public System.Nullable<int> RecordViews
		{
			get
			{
				return this._RecordViews;
			}
			set
			{
				if ((this._RecordViews != value))
				{
					this.OnRecordViewsChanging(value);
					this.SendPropertyChanging();
					this._RecordViews = value;
					this.SendPropertyChanged("RecordViews");
					this.OnRecordViewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullText", DbType="Int")]
		public System.Nullable<int> FullText
		{
			get
			{
				return this._FullText;
			}
			set
			{
				if ((this._FullText != value))
				{
					this.OnFullTextChanging(value);
					this.SendPropertyChanging();
					this._FullText = value;
					this.SendPropertyChanged("FullText");
					this.OnFullTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_DatabaseRecord", Storage="_Database", ThisKey="DatabaseID", OtherKey="DatabaseID", IsForeignKey=true)]
		public Database Database
		{
			get
			{
				return this._Database.Entity;
			}
			set
			{
				Database previousValue = this._Database.Entity;
				if (((previousValue != value) 
							|| (this._Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Database.Entity = null;
						previousValue.DatabaseRecords.Remove(this);
					}
					this._Database.Entity = value;
					if ((value != null))
					{
						value.DatabaseRecords.Add(this);
						this._DatabaseID = value.DatabaseID;
					}
					else
					{
						this._DatabaseID = default(int);
					}
					this.SendPropertyChanged("Database");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_DatabaseRecord", Storage="_Vendor", ThisKey="VendorID", OtherKey="VendorId", IsForeignKey=true)]
		public Vendor Vendor
		{
			get
			{
				return this._Vendor.Entity;
			}
			set
			{
				Vendor previousValue = this._Vendor.Entity;
				if (((previousValue != value) 
							|| (this._Vendor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vendor.Entity = null;
						previousValue.DatabaseRecords.Remove(this);
					}
					this._Vendor.Entity = value;
					if ((value != null))
					{
						value.DatabaseRecords.Add(this);
						this._VendorID = value.VendorId;
					}
					else
					{
						this._VendorID = default(int);
					}
					this.SendPropertyChanged("Vendor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Journals.VendorRecords")]
	public partial class VendorRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VendorID;
		
		private System.DateTime _RunDate;
		
		private System.Nullable<int> _Searches;
		
		private System.Nullable<int> _ResultClicks;
		
		private System.Nullable<int> _RecordViews;
		
		private System.Nullable<int> _FullText;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Vendor> _Vendor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVendorIDChanging(int value);
    partial void OnVendorIDChanged();
    partial void OnRunDateChanging(System.DateTime value);
    partial void OnRunDateChanged();
    partial void OnSearchesChanging(System.Nullable<int> value);
    partial void OnSearchesChanged();
    partial void OnResultClicksChanging(System.Nullable<int> value);
    partial void OnResultClicksChanged();
    partial void OnRecordViewsChanging(System.Nullable<int> value);
    partial void OnRecordViewsChanged();
    partial void OnFullTextChanging(System.Nullable<int> value);
    partial void OnFullTextChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public VendorRecord()
		{
			this._Vendor = default(EntityRef<Vendor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					if (this._Vendor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime RunDate
		{
			get
			{
				return this._RunDate;
			}
			set
			{
				if ((this._RunDate != value))
				{
					this.OnRunDateChanging(value);
					this.SendPropertyChanging();
					this._RunDate = value;
					this.SendPropertyChanged("RunDate");
					this.OnRunDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Searches", DbType="Int")]
		public System.Nullable<int> Searches
		{
			get
			{
				return this._Searches;
			}
			set
			{
				if ((this._Searches != value))
				{
					this.OnSearchesChanging(value);
					this.SendPropertyChanging();
					this._Searches = value;
					this.SendPropertyChanged("Searches");
					this.OnSearchesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultClicks", DbType="Int")]
		public System.Nullable<int> ResultClicks
		{
			get
			{
				return this._ResultClicks;
			}
			set
			{
				if ((this._ResultClicks != value))
				{
					this.OnResultClicksChanging(value);
					this.SendPropertyChanging();
					this._ResultClicks = value;
					this.SendPropertyChanged("ResultClicks");
					this.OnResultClicksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordViews", DbType="Int")]
		public System.Nullable<int> RecordViews
		{
			get
			{
				return this._RecordViews;
			}
			set
			{
				if ((this._RecordViews != value))
				{
					this.OnRecordViewsChanging(value);
					this.SendPropertyChanging();
					this._RecordViews = value;
					this.SendPropertyChanged("RecordViews");
					this.OnRecordViewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullText", DbType="Int")]
		public System.Nullable<int> FullText
		{
			get
			{
				return this._FullText;
			}
			set
			{
				if ((this._FullText != value))
				{
					this.OnFullTextChanging(value);
					this.SendPropertyChanging();
					this._FullText = value;
					this.SendPropertyChanged("FullText");
					this.OnFullTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_VendorRecord", Storage="_Vendor", ThisKey="VendorID", OtherKey="VendorId", IsForeignKey=true)]
		public Vendor Vendor
		{
			get
			{
				return this._Vendor.Entity;
			}
			set
			{
				Vendor previousValue = this._Vendor.Entity;
				if (((previousValue != value) 
							|| (this._Vendor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vendor.Entity = null;
						previousValue.VendorRecords.Remove(this);
					}
					this._Vendor.Entity = value;
					if ((value != null))
					{
						value.VendorRecords.Add(this);
						this._VendorID = value.VendorId;
					}
					else
					{
						this._VendorID = default(int);
					}
					this.SendPropertyChanged("Vendor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Journals.Vendors")]
	public partial class Vendor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VendorId;
		
		private string _VendorName;
		
		private EntitySet<JournalRecord> _JournalRecords;
		
		private EntitySet<DatabaseRecord> _DatabaseRecords;
		
		private EntitySet<VendorRecord> _VendorRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVendorIdChanging(int value);
    partial void OnVendorIdChanged();
    partial void OnVendorNameChanging(string value);
    partial void OnVendorNameChanged();
    #endregion
		
		public Vendor()
		{
			this._JournalRecords = new EntitySet<JournalRecord>(new Action<JournalRecord>(this.attach_JournalRecords), new Action<JournalRecord>(this.detach_JournalRecords));
			this._DatabaseRecords = new EntitySet<DatabaseRecord>(new Action<DatabaseRecord>(this.attach_DatabaseRecords), new Action<DatabaseRecord>(this.detach_DatabaseRecords));
			this._VendorRecords = new EntitySet<VendorRecord>(new Action<VendorRecord>(this.attach_VendorRecords), new Action<VendorRecord>(this.detach_VendorRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VendorName
		{
			get
			{
				return this._VendorName;
			}
			set
			{
				if ((this._VendorName != value))
				{
					this.OnVendorNameChanging(value);
					this.SendPropertyChanging();
					this._VendorName = value;
					this.SendPropertyChanged("VendorName");
					this.OnVendorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_JournalRecord", Storage="_JournalRecords", ThisKey="VendorId", OtherKey="VendorID")]
		public EntitySet<JournalRecord> JournalRecords
		{
			get
			{
				return this._JournalRecords;
			}
			set
			{
				this._JournalRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_DatabaseRecord", Storage="_DatabaseRecords", ThisKey="VendorId", OtherKey="VendorID")]
		public EntitySet<DatabaseRecord> DatabaseRecords
		{
			get
			{
				return this._DatabaseRecords;
			}
			set
			{
				this._DatabaseRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_VendorRecord", Storage="_VendorRecords", ThisKey="VendorId", OtherKey="VendorID")]
		public EntitySet<VendorRecord> VendorRecords
		{
			get
			{
				return this._VendorRecords;
			}
			set
			{
				this._VendorRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JournalRecords(JournalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = this;
		}
		
		private void detach_JournalRecords(JournalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = null;
		}
		
		private void attach_DatabaseRecords(DatabaseRecord entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = this;
		}
		
		private void detach_DatabaseRecords(DatabaseRecord entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = null;
		}
		
		private void attach_VendorRecords(VendorRecord entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = this;
		}
		
		private void detach_VendorRecords(VendorRecord entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = null;
		}
	}
}
#pragma warning restore 1591
